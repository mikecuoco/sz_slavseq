import pandas as pd
from pathlib import Path
from snakemake.utils import validate
from snakemake.utils import min_version
from snakemake.remote import FTP, HTTP

FTP = FTP.RemoteProvider()
HTTP = HTTP.RemoteProvider()


##### set minimum snakemake version #####
min_version("7.22.0")


wildcard_constraints:
    sample="\w+",


configfile: "config/config.yml"


validate(config, schema="schemas/config.schema.yaml")

# read sample sheets
samples = pd.read_csv(
    config["samples"],
    sep="\t",
    dtype={"sample_id": str, "tissue_id": str, "donor_id": str},
)
validate(samples, schema="schemas/samples.schema.yaml")
donors = pd.read_csv(config["donors"], sep="\t", dtype={"donor_id": str})
validate(donors, schema="schemas/donors.schema.yaml")

# merge sample sheets
samples = samples.merge(donors, on=["donor_id"]).set_index(
    ["donor_id", "sample_id"], drop=False
)

# create donor sheet
donors = donors.set_index("donor_id", drop=False)


include: "rules/ref.smk"
include: "rules/download.smk"
include: "rules/trim.smk"
include: "rules/align.smk"
include: "rules/model.smk"
include: "rules/qc.smk"


rule all:
    input:
        expand(
            rules.fit.output,
            outdir=config["outdir"],
        ),
        expand(
            expand(
                rules.flagstat.output,
                stage=["tagged.sorted"],
                outdir=config["outdir"],
                allow_missing=True,
            ),
            zip,
            sample=samples["sample_id"],
            donor=samples["donor_id"],
        ),
        expand(
            expand(
                rules.l1_coverage.output.r1,
                anno=[
                    "rmsk_1kb_3end",
                    "xtea_1kb_3end",
                ],
                outdir=config["outdir"],
                allow_missing=True,
            ),
            zip,
            sample=samples["sample_id"],
            donor=samples["donor_id"],
        ),
